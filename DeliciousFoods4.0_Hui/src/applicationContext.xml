<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	">


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="configLocation"
			value="classpath:hibernate.cfg.xml">
		</property>
	</bean>
	<!-- 事务管理器 -->
	<!-- 相当于biz中每一个插入的方法在调用前都添加了一个begin section -->
	<!-- 在执行之后都加了一个command -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事务通知  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="60"/>
		</tx:attributes>
	</tx:advice>
	<!-- aop:切面 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.delicious.biz.*.*(..))"
					 advice-ref="txAdvice"/>
	</aop:config>
	
	
	<!-- dao -->
	<!-- 使用ref直接引用 上面已经构建好的bean的id:sessionFactory,name的sessionFactory指的是在FoodsDaoImpl中提供的一个属性-->
	<bean id="foodsDao" class="com.delicious.dao.impl.FoodsDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="newsDao" class="com.delicious.dao.impl.NewsDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="categoryDao" class="com.delicious.dao.impl.CategoryDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="messagesDao" class="com.delicious.dao.impl.MessagesDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="usersDao" class="com.delicious.dao.impl.UsersDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="commentsDao" class="com.delicious.dao.impl.CommentsDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<!-- biz -->
	<!-- 依赖的是数据层，ref指的是上面bean对应的id -->
	<bean id="foodsBiz" class="com.delicious.biz.impl.FoodsBizImpl">
		<property name = "foodsDao" ref="foodsDao"></property>
	</bean>
	<bean id="newsBiz" class="com.delicious.biz.impl.NewsBizImpl">
		<property name = "newsDao" ref="newsDao"></property>
	</bean>
	<bean id="categoryBiz" class="com.delicious.biz.impl.CategoryBizImpl">
		<property name = "categoryDao" ref="categoryDao"></property>
	</bean>
	<bean id="messagesBiz" class="com.delicious.biz.impl.MessagesBizImpl">
		<property name = "messagesDao" ref="messagesDao"></property>
	</bean>
	<bean id="usersBiz" class="com.delicious.biz.impl.UsersBizImpl">
		<property name = "usersDao" ref="usersDao"></property>
	</bean>
	<bean id="commentsBiz" class="com.delicious.biz.impl.CommentsBizImpl">
		<property name = "commentsDao" ref="commentsDao"></property>
	</bean>
	
	<!-- action -->
	<!-- scope="prototype"设置生命周期，每次请求都看到一个新的对象，返回新的数据 -->
	<bean id="indexAction" class="com.delicious.action.IndexAction" scope="prototype">
		<property name="foodsBiz" ref="foodsBiz"></property>
		<property name="newsBiz" ref="newsBiz"></property>
	</bean>
	<bean id="sidebarAction" class="com.delicious.action.SidebarAction" scope="prototype">
		<property name="categoryBiz" ref="categoryBiz"></property>
	</bean>
	<bean id="foodsAction" class="com.delicious.action.FoodsAction" scope="prototype">
		<property name="foodsBiz" ref="foodsBiz"></property>
		<property name="categoryBiz" ref="categoryBiz"></property>
	</bean>
	<bean id="newsAction" class="com.delicious.action.NewsAction" scope="prototype">
		<property name="newsBiz" ref="newsBiz"></property>
	</bean>
	<bean id="messagesAction" class="com.delicious.action.MessagesAction" scope="prototype">
		<property name="messagesBiz" ref="messagesBiz"></property>
	</bean>
	<bean id="usersAction" class="com.delicious.action.UsersAction" scope="prototype">
		<property name="usersBiz" ref="usersBiz"></property>
	</bean>
	<bean id="commentsAction" class="com.delicious.action.CommentsAction" scope="prototype">
		<property name="commentsBiz" ref="commentsBiz"></property>
		<property name="foodsBiz" ref="foodsBiz"></property>
	</bean>
	
	<!-- 后台处理的action -->
	<bean id="adminFoodsAction" class="com.delicious.action.AdminFoodsAction" scope="prototype">
		<property name="foodsBiz" ref="foodsBiz"></property>
		<property name="categoryBiz" ref="categoryBiz"></property>
	</bean>
	<bean id="adminMessagesAction" class="com.delicious.action.AdminMessagesAction" scope="prototype">
		<property name="messagesBiz" ref="messagesBiz"></property>
	</bean>
	<bean id="adminUsersAction" class="com.delicious.action.AdminUsersAction" scope="prototype">
		<property name="usersBiz" ref="usersBiz"></property>
	</bean>
	<bean id="adminCategoryAction" class="com.delicious.action.AdminCategoryAction" scope="prototype">
		<property name="categoryBiz" ref="categoryBiz"></property>
	</bean>
	<bean id="adminNewsAction" class="com.delicious.action.AdminNewsAction" scope="prototype">
		<property name="newsBiz" ref="newsBiz"></property>
	</bean>
</beans>